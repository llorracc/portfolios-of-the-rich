(*% Construct the expectation of next periods functions*)If[VerboseOutput == True,Print["Running EtVtp1_FOC."]];MakeEtp1ArgArrayAugmented = AddOutcome[MakeEtp1ArgArray,Table[LifePosn,{Length[MakeEtp1ArgArray]}]];{FOCwrtKSharetResults,FOCwrtRiskySharetResults,PhiKSstResults,PhiKStResults} =   Transpose[Map[Apply[MakeEtp1Raw,#] &,MakeEtp1ArgArrayAugmented]];If[LifePosn==79,{KStmp,RStmp,PhiKSsttmp,PhiKSttmp} = {FOCwrtKSharetResults,FOCwrtRiskySharetResults,PhiKSstResults,PhiKStResults};]PhiKSstScaled = PhiKSstResults^(1/-rho);PhiKStScaled  = ((1-rho)PhiKStResults)^(1/(1-rho));If[etZeroProb > 0,    (* then *)      ValOfPhistScaledAtsEq0 = 0;      MakeInterpWithZeroVals["PhiKSst",InterpOrder,PhiKSstScaled,ValOfPhistScaledAtsEq0],    (* else *)      MakeInterpGivenFunctionNameAndResults["PhiKSst",PhiKSstScaled,InterpOrder];]; (* End If etZeroProb > 0 *)            If[etZeroProb > 0,  (* then *)    ValOfPhitScaledAtsEq0 = 0;    MakeInterpWithZeroVals["PhiKSt",InterpOrder,PhiKStScaled,ValOfPhitScaledAtsEq0],  (* else *)    MakeInterpGivenFunctionNameAndResults["PhiKSt",PhiKStScaled,InterpOrder]]; (* End If etZeroProb > 0 *)EarliestEtVtp1Solved = LifePosn;    PhiKStScaledMerged = PhiKStScaled;    PhiKSstScaledMerged=PhiKSstScaled;    FOCwrtKSharetResultsMerged = FOCwrtKSharetResults;    FOCwrtRiskySharetResultsMerged=FOCwrtRiskySharetResults;    MakeEtp1MergedArgArray = MakeEtp1ArgArray;FOCwrtKSharetInterpData[[LifePosn]]     =   AddOutcome[FOCwrtKSharetArgArray    ,FOCwrtKSharetResultsMerged];FOCwrtRiskySharetInterpData[[LifePosn]] =   AddOutcome[FOCwrtRiskySharetArgArray,FOCwrtRiskySharetResultsMerged];FOCwrtKSharetInterpFunc[[LifePosn]]     =   Interpolation[FOCwrtKSharetInterpData[[LifePosn]],InterpolationOrder->InterpOrder];FOCwrtRiskySharetInterpFunc[[LifePosn]] =   Interpolation[FOCwrtRiskySharetInterpData[[LifePosn]],InterpolationOrder->InterpOrder];<<FindRiskyShare.m;RiskyShareKtInterpData[[LifePosn]] =     AddOutcome[      RiskyShareKtArgArray,      Map[FindRiskyShareKt[[LifePosn]],RiskyShareKtArgArray]    ];    RiskyShareKtInterpFunc[[LifePosn]] =  Interpolation[RiskyShareKtInterpData[[LifePosn]],InterpolationOrder->1];<<FindKSharet.m;KSharetInterpData[[LifePosn]] =     AddOutcome[      KSharetArgArray,      Map[FindKSharet[[LifePosn]],KSharetArgArray]    ];    KSharetInterpFunc[[LifePosn]] =  Interpolation[KSharetInterpData[[LifePosn]],InterpolationOrder->1];If[VerboseOutput == True,Print["Creating Phit."]];PhistArgArrayAugmented = AddOutcome[PhistArgArray,Table[LifePosn,{Length[PhistArgArray]}]];PhistScaled = (Map[Apply[PhistRaw, #] &,PhistArgArrayAugmented])^(1/-rho);If[etZeroProb > 0,  (* then *)    ValOfPhitScaledAtsEq0 = 0;    MakeInterpWithZeroVals["Phist",InterpOrder,PhistScaled,ValOfPhitScaledAtsEq0],  (* else *)    MakeInterpGivenFunctionNameAndResults["Phist",PhistScaled,InterpOrder]];PhitScaled=((1-rho) Map[Apply[PhitRaw, #] &,PhistArgArrayAugmented])^(1/(1-rho));If[etZeroProb > 0,  (* then *)    ValOfPhitScaledAtsEq0 = 0;    MakeInterpWithZeroVals["Phit",InterpOrder,PhitScaled,ValOfPhitScaledAtsEq0],  (* else *)    MakeInterpGivenFunctionNameAndResults["Phit",PhitScaled,InterpOrder]];(*PhitPrimeResults = Map[Apply[PhitPrime, #] &,PhitArgArrayAugmented];PhitPrimeInterpData[[LifePosn]] = AddOutcome[PhitArgArray,PhitPrimeResults];PhitPrimeInterpFunc[[LifePosn]] = Interpolation[PhitPrimeInterpData[[LifePosn]],InterpolationOrder->1];ListOfZeros = Table[0,{Length[PhitArgArray]}];PhitScaledFirstDerivs =   Transpose[    {PhitPrimeResults     ,ListOfZeros     ,ListOfZeros     ,ListOfZeros    }];(*PhitScaledFirstDerivs = Transpose[{(((1-rho)(Map[Apply[Phit,{#[[1]]+.0001,#[[2]],#[[3]],#[[4]],#[[5]]}] &,PhitArgArrayAugmented]))^(1/(1-rho))-((1-rho)*Map[Apply[Phit,{#[[1]]-.0001,#[[2]],#[[3]],#[[4]],#[[5]]}] &,PhitArgArrayAugmented])^(1/(1-rho)))/.0002,ListOfZeros,ListOfZeros,ListOfZeros}];PhitFirstDerivs =   Transpose[    {(PhitScaled^rho)*(Map[Apply[PhistRaw,#] &,PhistArgArrayAugmented]),    ListOfZeros,ListOfZeros,ListOfZeros}];*)    PhitScaledLevelAndFirstDerivs = Transpose[{PhitScaled,PhitScaledFirstDerivs}];If[etZeroProb > 0,  (* then *)    ValOfPhitScaledAtsEq0 = {0,{1,0,0,0}};    MakeInterpWithZeroVals["Phit",InterpOrder,PhitScaled,ValOfPhitScaledAtsEq0],  (* else *)    MakeInterpGivenFunctionNameAndResults["Phit",PhitScaledLevelAndFirstDerivs,InterpOrder]];*)MakeInterpGivenFunctionName["CertEquiv",InterpOrder];(*If[BequestMotive,  (* then *)    AdditionalsGridPoints =       {(s /. FindRoot[PhitPrimeInterpFunc[[LifePosn]][s,PermIncGrid[[2]],2,1]==(VtPrimeWhereBeqMotiveKicksIn+1)/2,{s,{BeqMotiveKicksIn-1,BeqMotiveKicksIn+1}}])      ,(s /. FindRoot[PhitPrimeInterpFunc[[LifePosn]][s,PermIncGrid[[2]],2,1]==.2                                ,{s,{BeqMotiveKicksIn-1,BeqMotiveKicksIn+1}}])      ,(s /. FindRoot[PhitPrimeInterpFunc[[LifePosn]][s,PermIncGrid[[2]],2,1]==VtPrimeWhereBeqMotiveKicksIn      ,{s,{BeqMotiveKicksIn-1,BeqMotiveKicksIn+1}}])      };      sGrid = Union[sGridBaseline,AdditionalsGridPoints];      MakeArgArrays[sFunctions];]*)             (*MultiplyPhiBy = (1-rho);RaisePhiTo=(1/(1-rho));MakeNormedInterpGivenFunctionName["Phit",InterpOrder,MultiplyPhiBy,(1/(1-rho))];MultiplyPhisBy= 1      ;RaisePhisTo=-rho;MakeNormedInterpGivenFunctionName["Phist",InterpOrder,MultiplyPhisBy,1/-rho];MakeInterpGivenFunctionName["CertEquiv",InterpOrder];If[VerboseOutput == True,Print["Making Phist, Phiht, CertEquiv"]];MakeNormedInterpGivenFunctionName["Phist"    ,InterpOrder,PositiveFunc,(1/-rho)];MakeNormedInterpGivenFunctionName["Phiht"    ,InterpOrder,NegativeFunc,(1/(1-rho))];MakeInterpGivenFunctionName["CertEquiv",InterpOrder];PhiKStFirstDerivsWithZeros = Join[PhiKStFirstDerivs,Table[{1,0,0,0,0,0},{Length[PhiKStZeroArgArray]}]];PhiKStScaledLevelAndFirstDerivs =   Transpose[{PhiKStScaledWithZeros,PhiKStFirstDerivsWithZeros}];MultiplyPhiBy = (1-rho);  RaisePhiTo = (1/(1-rho));PhiKSstScaled = PhiKSstResults^(-1/rho);PhiKSstScaledWithZeros =   Join[PhiKSstScaled,Table[0,{Length[PhiKSstZeroArgArray]}]];PhiKStScaled  = ((1-rho)PhiKStResults)^(1/(1-rho));PhiKStScaledWithZeros = Join[PhiKStScaled,Table[0,{Length[PhiKStZeroArgArray]}]];*)