(*% This program defines the "pure" functions which return the value % of pursuing each of the possible housing options available at time LifePosn for % a given state. % FindBest requires several ambient variables to be defined.*)If[VerboseOutput == True,Print["Running FindRiskyShare.m"]];FindRiskyShareKt[[LifePosn]] =Block[{ st       = #[[stInPosFOC]],PermInc  = #[[PermIncInPosFOC]],QState   = #[[QStateInPosFOC]],EmpState = #[[EmpStateInPosFOC]],KShare   = #[[KSharetInPosFOC]]}, If[KShare == 1,    (* then *) RiskySharetResult = 0,   (* else *)   If[SolveForRiskyShare == False,    (* then *) RiskySharetResult = 0,    (* else *)        If[st > smin,                  (*   If they have positive liquid assets            *)           (* then *)                 (*     then choose optimal level of expenditures et *)                 RiskyShareResults=	  (* %   to maximize utility u[] by minimizing        *)	                 FindMinimum[                            -PhiKSt[st                                   ,PermInc                                   ,QState                                   ,EmpState                                   ,KShare                                   ,RiskyShare                                   ,LifePosn]                     ,{RiskyShare,.5},MaxIterations->100];              If[Length[RiskyShareResults]>2,Print["RiskyShareResults of improper form; probably FindRoot failed"];Interrupt[]];              RiskySharetResult = Round[(RiskyShare /. RiskyShareResults[[2]])*1000]/1000;              If[RiskySharetResult>1, (* then *) RiskySharetResult=1];              If[RiskySharetResult<0, (* then *) RiskySharetResult=0];              If[PhiKSt[st,PermInc,QState,EmpState,KShare,1,LifePosn]>PhiKSt[st,PermInc,QState,EmpState,KShare,RiskyShareResult,LifePosn],                (* then *) RiskyShareResult = 1];              If[PhiKSt[st,PermInc,QState,EmpState,KShare,0,LifePosn]>PhiKSt[st,PermInc,QState,EmpState,KShare,RiskyShareResult,LifePosn],                (* then *) RiskyShareResult = 0];            ,(* else *)          RiskyShare = RiskySharetResult = 0;       ];  (* End If st > smin *)    ];     (* End If SolveForRiskyShare == False *)  ];       (* End If KShare == 1 *)RiskySharetResult //N] &;{RiskySharetOutPos,PhistOutPos,PhihtOutPos} = {1,2,3};