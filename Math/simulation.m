(*Generalized simulation routine *)ListOfVtStateVarNames     = {"xt","htStart","AggState","EmpState","epDraw"};ListOfOutputVarNames      = {"ct","ht","st"};ListOfEtVtp1StateVarNames = {"st","ht"     ,"AggState","EmpState","RiskySharet"};ListOfPhitStateVarNames   = {"st","ht"     ,"AggState","EmpState"};ListOfPhitOutputVarNames  = {"RiskySharet"};ListOfVarsToMake          = {"PermanentIncomet"};ListOfVarsToTakeMeanOf    = {"xt","htStart","RiskySharet","ct","st","ht","PermanentIncomet","epDraw","etDraw","RDraw"};ListOfRandomVarNames      = {"EmpState","AggState","epDraw","etDraw","RDraw"};ListOfAllOutputVarNames   = Join[ListOfOutputVarNames,ListOfPhitOutputVarNames]Simulate[Startx_:1,StartHabit_:1,NumOfPeriods_:LifeLength,NumOfPeople_:1000] :=Block[{},SetupSimulationVars;FirstPeriod = 1;FirstPerson = 1;stSims[[FirstPeriod]]          = Table[0         ,{NumOfPeople}];xtSims[[FirstPeriod]]          = Table[Startx    ,{NumOfPeople}];htStartSims[[FirstPeriod]]     = Table[StartHabit,{NumOfPeople}];AggStateSims[[FirstPeriod]]    = Table[1         ,{NumOfPeople}];EmpStateSims[[FirstPeriod]]    = Table[1         ,{NumOfPeople}];epDrawSims[[FirstPeriod]]      = Table[1         ,{NumOfPeople}];etDrawSims[[FirstPeriod]]      = Table[1         ,{NumOfPeople}];PermanentIncometSims[[FirstPeriod]]= Table[1     ,{NumOfPeople}];RDrawSims[[FirstPeriod]]       = Table[1         ,{NumOfPeople}];MakeChoicesAndDoCalculations[FirstPeriod,NumOfPeople];If[NumOfPeriods>1,KeepSimulatingPeriods[2,NumOfPeriods,NumOfPeople]];];KeepSimulatingPeriods[StartPeriod_,EndPeriod_,NumOfPeople_] :=Block[{},Do[Print["Simulating Period "<>ToString[LoopOverPeriods]];AggStateSims[[LoopOverPeriods]] = (* There is only one aggregate state shared by everybody, but for symmetry the matrix must have*)(* an entry for every person; hence, draw the new state for the first person, and duplicate    *) Table[                             DrawNextState[AggStateSims[[LoopOverPeriods-1,FirstPerson]],                               (* First argument: current state    *)                CumAggStateTransitionMatrix                                                  (* Second argument: cum trans matrix*)               ] (* end of DrawNextState *) ,{NumOfPeople}]; (* Duplicate for entire population *)RDrawSims[[LoopOverPeriods]] =                                                               (* Draw NumOfPeople interest rates *)  Map[        Function[{x},R[[AggStateSims[[LoopOverPeriods,FirstPerson]],x]]]        ,Table[FirstElementGreaterThan[CumRStateTransitionMatrix[[AggStateSims[[LoopOverPeriods,FirstPerson]]]],Random[]]               ,{NumOfPeople}]     ]; GrowthRateList =  Map[      Function[{x},G[[LoopOverPeriods,x]]]      ,Table[AggStateSims[[LoopOverPeriods,FirstPerson]]            ,{NumOfPeople}]     ];EmpStateSims[[LoopOverPeriods]] = Table[1,{NumOfPeople}];etDrawSims[[LoopOverPeriods]]   =     Table[        etVals[[LoopOverPeriods,             AggStateSims[[LoopOverPeriods,FirstPerson]],             EmpStateSims[[LoopOverPeriods,LoopOverPeople]],             FirstElementGreaterThan[                 etProbCum[[LoopOverPeriods                           ,AggStateSims[[LoopOverPeriods,FirstPerson]]                           ,EmpStateSims[[LoopOverPeriods,LoopOverPeople]]                          ]],                 Random[]]             (* End FirstElementGreaterThan *)             ]]                        (* End etVals *)    ,{LoopOverPeople,NumOfPeople}];    (* End Table  *)epDrawSims[[LoopOverPeriods]]   =     Table[        epVals[[LoopOverPeriods,             AggStateSims[[LoopOverPeriods,FirstPerson]],             EmpStateSims[[LoopOverPeriods,LoopOverPeople]],             FirstElementGreaterThan[                 epProbCum[[LoopOverPeriods                           ,AggStateSims[[LoopOverPeriods,FirstPerson]]                           ,EmpStateSims[[LoopOverPeriods,LoopOverPeople]]                          ]],                 Random[]]             (* End FirstElementGreaterThan *)             ]]                        (* End epVals *)    ,{LoopOverPeople,NumOfPeople}];    (* End Table  *)(*RDrawSims[[LoopOverPeriods]] =    Table[        R[[            AggStateSims[[LoopOverPeriods,FirstPerson]],            FirstElementGreaterThan[                CumRStateTransitionMatrix[[AggStateSims[[LoopOverPeriods,FirstPerson]]]]                ,Random[]]             (* End FirstElementGreaterThan *)           ]]                          (* End R                       *)    ,{LoopOverPeople,NumOfPeople}];*)Rweighted = RDrawSims[[LoopOverPeriods]] RiskySharetSims[[LoopOverPeriods-1]]+ Rcertain (1-RiskySharetSims[[LoopOverPeriods-1]]);PermanentIncomeGrowthFactor = (GrowthRateList epDrawSims[[LoopOverPeriods]]);PermanentIncometSims[[LoopOverPeriods]] = PermanentIncometSims[[LoopOverPeriods-1]] PermanentIncomeGrowthFactor;xtSims[[LoopOverPeriods]]= (Rweighted/PermanentIncomeGrowthFactor) stSims[[LoopOverPeriods-1]] + etDrawSims[[LoopOverPeriods]];htStartSims[[LoopOverPeriods]] = htSims[[LoopOverPeriods-1]];MakeChoicesAndDoCalculations[LoopOverPeriods,NumOfPeople];,{LoopOverPeriods,StartPeriod,EndPeriod}];];ClearAll[MakeChoicesAndDoCalculations];MakeChoicesAndDoCalculations[PeriodNumber_,NumOfPeople_] := Block[{},VtStateVarMatrix =   (* Construct the set of arguments to the functions that determine policy choices *)  Transpose[    Append[      Table[        ToExpression[ListOfVtStateVarNames[[i]]<>"Sims[["<>ToString[PeriodNumber]<>"]]"]        ,{i,Length[ListOfVtStateVarNames]}]      ,Table[PeriodNumber,{NumOfPeople}]      ] (* End Append *)  ];   (* End Transpose *)ListOfOutputSims =   (* Make the choices *)Table[  Map[    ToExpression[ListOfOutputVarNames[[LoopOverOutputVarNames]]<>"FOC"]    ,VtStateVarMatrix  ] (* End Map *),{LoopOverOutputVarNames,Length[ListOfOutputVarNames]}]; (* End Table *)Do[  ToExpression[    ListOfOutputVarNames[[LoopOverOutputVarNames]]<>"Sims[["<>ToString[PeriodNumber]<>"]] = ListOfOutputSims[["<>ToString[LoopOverOutputVarNames]<>"]]"],{LoopOverOutputVarNames,Length[ListOfOutputVarNames]}];(*stSims[[PeriodNumber]] = xtSims[[PeriodNumber]]-ctSims[[PeriodNumber]];htSims[[PeriodNumber]] =   (1-catchup)htStartSims[[PeriodNumber]]/G[[PeriodNumber,AggStateSims[[PeriodNumber]]]]  + catchup ctSims[[PeriodNumber]];*)  PhitStateVarMatrix =   (* Construct the set of arguments to the functions that determine policy choices *)  Transpose[    Append[      Table[        ToExpression[ListOfPhitStateVarNames[[i]]<>"Sims[["<>ToString[PeriodNumber]<>"]]"]        ,{i,Length[ListOfPhitStateVarNames]}]      ,Table[PeriodNumber,{NumOfPeople}]      ] (* End Append *)  ];   (* End Transpose *)ListOfPhitOutputSims =   (* Make the choices *)Table[  Map[    ToExpression[ListOfPhitOutputVarNames[[LoopOverPhitOutputVarNames]]<>"FOC"]    ,PhitStateVarMatrix  ] (* End Map *),{LoopOverPhitOutputVarNames,Length[ListOfPhitOutputVarNames]}]; (* End Table *)Do[  ToExpression[    ListOfPhitOutputVarNames[[LoopOverPhitOutputVarNames]]<>"Sims[["<>ToString[PeriodNumber]<>"]] = ListOfPhitOutputSims[["<>ToString[LoopOverPhitOutputVarNames]<>"]]"],{LoopOverPhitOutputVarNames,Length[ListOfPhitOutputVarNames]}];Do[  ToExpression[    ListOfVarsToTakeMeanOf[[LoopOverVarsToTakeMeanOf]]<>"Mean[["<>ToString[PeriodNumber]<>"]] = Mean["<>ListOfVarsToTakeMeanOf[[LoopOverVarsToTakeMeanOf]]<>"Sims[["<>ToString[PeriodNumber]<>"]]]"],{LoopOverVarsToTakeMeanOf,Length[ListOfVarsToTakeMeanOf]}];];SetupSimulationVars :=(*Set up empty variables to hold the simulated data*)Block[{},MakeNewVarByAppendingStringToName[ListOfVtStateVarNames    ,"Sims"];MakeNewVarByAppendingStringToName[ListOfOutputVarNames     ,"Sims"];MakeNewVarByAppendingStringToName[ListOfPhitOutputVarNames ,"Sims"];MakeNewVarByAppendingStringToName[ListOfRandomVarNames     ,"Sims"];MakeNewVarByAppendingStringToName[ListOfVarsToMake         ,"Sims"];MakeNewVarByAppendingStringToName[ListOfVarsToTakeMeanOf   ,"Mean"];];ClearAll[DrawNextAggState];DrawNextAggState[CurrAggState_] := FirstElementGreaterThan[CumAggStateTransitionMatrix[[CurrAggState]],Random[]];DrawNextAggState[CurrAggStateList_List] := Table[FirstElementGreaterThan[CumAggStateTransitionMatrix[[CurrAggStateList[[i]]]],Random[]],{i,Length[CurrAggStateList]}];ClearAll[DrawNextState];DrawNextState[CurrState_,CumStateTransitionMatrix_] := FirstElementGreaterThan[CumStateTransitionMatrix[[CurrState]],Random[]];SaveMeans[filename_] := Block[{},   SetDirectory["Output"];   MeansFileName = filename;   ListOfVars =      Table[       ListOfVarsToTakeMeanOf[[LoopOverVars]]       <>"Mean"       <>If[LoopOverVars<Length[ListOfVarsToTakeMeanOf],",",""]     ,{LoopOverVars,Length[ListOfVarsToTakeMeanOf]}];     ToExpression["Save[MeansFileName,"<>ListOfVars<>"]"];     SetDirectory[ParentDirectory[]];]SaveSims[filename_] := Block[{},   SetDirectory["Output"];   SimsFileName = filename;   ListOfSimulatedVars =       Union[        Join[           ListOfVtStateVarNames               ,ListOfOutputVarNames                ,ListOfEtVtp1StateVarNames          ,ListOfEtVtp1StateVarNames           ,ListOfPhitStateVarNames             ,ListOfPhitOutputVarNames            ,ListOfVarsToMake                    ,ListOfRandomVarNames     ]]  ;    ListOfVars =      Table[       ListOfSimulatedVars[[LoopOverVars]]       <>"Sims"       <>If[LoopOverVars<Length[ListOfSimulatedVars],",",""]     ,{LoopOverVars,Length[ListOfSimulatedVars]}];     ToExpression["Save[SimsFileName,"<>ListOfVars<>"]"];     SetDirectory[ParentDirectory[]];]SaveAll[filename_] := Block[{},  DeleteFile[filename];  SaveMeans[filename];  SaveSims[filename];  ]  