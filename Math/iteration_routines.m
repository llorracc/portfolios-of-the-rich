(* The routines in this file define the iteration procedure forfinding the converged solution.  SolveTill[Tolerance_] startsat the last period and solves backwards.  KeepSolving[Tolerance]assumes that there is a partial solution already resident inmemory, and continues solving from the current LifePosn.*)(* % This file defines the functions used to iteratively solve % each period of life starting with the last period of life.% SolvePeriods[] starts at the last period and solves backwards.% KeepSolvingPeriods[] assumes that there is a partial solution % already resident in memory, and continues solving from the % current LifePosn for NumOfPeriods*)Clear[SolvePeriods];SolvePeriods[NumOfPeriods_] := Block[{},<<last_period.m;		   (* % Solve for the last period of life *)EarliestPeriodSolved = LifePosn;	KeepSolvingPeriods[NumOfPeriods-1] (* % Then keep solving for (NumOfPeriods-1) periods *)];ClearAll[KeepSolvingPeriods];KeepSolvingPeriods[NumOfPeriods_] := Block[{},Do[LifePosn--;  			   (* % Decrement the period of life *)Print["Solving Period "<>ToString[LifePosn]];<<make_EtVtp1.m;		   (* % Construct the expectation of next period's vt *)If[SolutionMethod == Value || SolutionMethod == Both,<<make_VtVals.m];If[SolutionMethod == FOC   || SolutionMethod == Both,<<FindViaFOC.m;<<FindKSharet.m];<<make_interpolating.m;EarliestPeriodSolved = LifePosn;(*  Print["Vt[xmax,hmax,1,EmpStateEmployed,LifePosn] = "         <>ToString[Vt[xmax,hmax,1,EmpStateEmployed,LifePosn]]];  Differences = Flatten[                  Table[                    Vt[xmax,hmax,LoopOverAggStates,EmpStateEmployed,1,LifePosn+1]                   - Vt[xmax,hmax,LoopOverAggStates,EmpStateEmployed,1,LifePosn]                      ,{LoopOverAggStates,NumOfAggStates}]];Print["Mean Differences "<>ToString[Mean[Differences]]];*)<<clearextradata.m;,{LoopOverPeriods,1,NumOfPeriods}] (* end Do *)]; (* end KeepSolvingPeriods *)