(*% This program defines the "pure" functions which return the value % of pursuing each of the possible housing options available at time LifePosn for % a given state. % FindBest requires several ambient variables to be defined.*)If[VerboseOutput == True,Print["Running FindKSharet.m"]];FindKSharet[[LifePosn]] =Block[{ st         = #[[stInPosFOC]],PermInc    = #[[PermIncInPosFOC]],QState     = #[[QStateInPosFOC]],EmpState   = #[[EmpStateInPosFOC]]},  If[SolveForKShare == False,    (* then *) KSharetResults = 0,    (* else *)        If[st > smin,                  (*   If they have positive liquid assets            *)           (* then *)                 (*     then choose optimal level of expenditures et *)                 KShareResults=	        (* %   to maximize utility u[] by minimizing        *)	                 FindMinimum[                            -PhiKSt[st                                   ,PermInc                                   ,QState                                   ,EmpState                                   ,KShare                                   ,RiskyShareKt[st,PermInc,QState,EmpState,KShare,LifePosn]                                   ,LifePosn]==0                     ,{KShare,.5},MaxIterations->100];              If[Length[KShareResults]>2,Print["KShareResults of improper form; probably FindRoot failed"];Interrupt[]];              KSharetResults = Round[(KShare /. KShareResults[[2]])*1000]/1000;              If[KSharetResults>1, (* then *) KSharetResults=1];              If[KSharetResults<0, (* then *) KSharetResults=0];              RiskyShareAtOptimalKShare = RiskyShareKt[st,PermInc,QState,EmpState,KSharetResults,LifePosn];              RiskyShareAtKShareEq1     = RiskyShareKt[st,PermInc,QState,EmpState,1,LifePosn];              RiskyShareAtKShareEq0     = RiskyShareKt[st,PermInc,QState,EmpState,0,LifePosn];              If[PhiKSt[st,PermInc,QState,EmpState,1,RiskyShareAtKShareEq1,LifePosn]>PhiKSt[st,PermInc,QState,EmpState,KSharetResults,RiskyShareAtOptimalKShare,LifePosn],                (* then *) KSharetResults = 1;RiskyShareAtOptimalKShare = RiskyShareKt[st,PermInc,QState,EmpState,KSharetResults,LifePosn]];              If[PhiKSt[st,PermInc,QState,EmpState,0,RiskyShareAtKShareEq0,LifePosn]>PhiKSt[st,PermInc,QState,EmpState,KSharetResults,RiskyShareAtOptimalKShare,LifePosn],                (* then *) KSharetResults = 0];            ,(* else *)              KShare = KSharetResults = 0;       ];  (* End If st > smin *)  ];       (* End If SolveForKShare == False *)KSharetResults //N] &;